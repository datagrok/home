#!/bin/sh

# changewatch
#
# usage: changewatch TARGETDIR COMMAND ARGS
#
# Watch a directory for changes (files being written to) and take action. Calls
# COMMAND with ARGS and the path to the modified file as the final argument.
#
# Basically, this is a simple wrapper to inotifywait with defaults appropriate
# for my most common uses.
#
# vim needs :set nowritebackup for this to work at all when called against a
# single file. With :set writebackup, inotifywait sees on write the sequence:
# MOVE_SELF ATTRIB DELETE_SELF, then it never wakes on this file again. (With
# :set nowritebackup inotifywait sees: MODIFY OPEN MODIFY CLOSE_WRITE,CLOSE
# ATTRIB OPEN CLOSE_NOWRITE,CLOSE OPEN CLOSE_NOWRITE,CLOSE)

if [ "$1" = "--bulk" ]; then
    shift
    bulk=true
fi

TARGETDIR="$1"
COMMAND="$2"
shift 2

if [ "$bulk" ]; then
    while inotifywait \
              --exclude '\.sw..\?$' \
              --exclude '\.git/' \
              --exclude '\.svn/' \
              -re close_write "$TARGETDIR"
    do
        [ "$DEBUG" ] && echo "$0": "$COMMAND" "$@"  >&2
        "$COMMAND" "$@"
    done
else
    inotifywait \
        --exclude '\.sw..\?$' \
        --exclude '\.git/' \
        --exclude '\.svn/' \
        -rme close_write "$TARGETDIR" \
        | while read dir event filename
    do
        [ -e "$dir$filename" ] || continue
        [ "$DEBUG" ] && echo "$0": "$COMMAND" "$@" "$dir$filename" >&2
        "$COMMAND" "$@" "$dir$filename"
    done
fi
