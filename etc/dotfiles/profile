#!/bin/false # This file is sourced by the command interpreter for login shells.
# see /usr/share/doc/bash/examples/startup-files for examples.
# the files are located in the bash-doc package.
#
# I have .zprofile sourcing this as well, so ensure all commands are dash,
# bash, and zsh-compatible.

# Useful for debugging startup execution path.
echo "Sourcing ~/.profile"
export _PROFILE_APPLIED=1

# the default umask is set in /etc/login.defs
umask 002

# golang's GOPATH
if [ -d $HOME/var/go ]; then
	export GOPATH="$HOME/var/go"
	export GOBIN="$GOPATH/bin"
fi

# make 'npm install -g' install to my homedir
if [ -x /usr/bin/npm ]; then
    export NPM_CONFIG_PREFIX="$HOME/var/node_modules_global"
    [ -d "$NPM_CONFIG_PREFIX" ] || mkdir -p "$NPM_CONFIG_PREFIX"
fi

# prepend private bin(s) and man(s) if they exist to PATH
for P in \
        $(python -m site --user-base | tr ':' ' ') \
        $HOME/usr/lib/Elm-Platform/*/.cabal-sandbox \
        $HOME/usr \
        $HOME/.cabal \
        $HOME/.guix-profile \
        $HOME/.gem/ruby/2.5.0 \
        $GOPATH \
        $NPM_CONFIG_PREFIX \
        $HOME
do
	if [ -d "${P}/bin" ]; then
		PATH="${P}/bin${PATH:+:}${PATH}"
	fi
	if [ -d "${P}/sbin" ]; then
		PATH="${P}/sbin:${PATH:+:}${PATH}"
	fi
	if [ -d "${P}/man" ]; then
		MANPATH="${P}/man${MANPATH:-:/usr/share/man}"
	fi
	if [ -d "${P}/share/man" ]; then
		MANPATH="${P}/share/man${MANPATH:-:/usr/share/man}"
	fi
	if [ -d "${P}/share/info" ]; then
		INFOPATH="${P}/share/info${INFOPATH:-:/usr/share/info}"
	fi
done

# Sun Java install for versions less than 6 on debian is a bit stupid
# Java 6 deb is non-stupid; maybe I can soon remove this block
# Next line needs 'nonomatch' or 'null_glob' in zsh.
if [ -d /usr/lib/j2sdk*/bin ] ; then
	for P in /usr/lib/j2sdk*/jre/bin /usr/lib/j2sdk*/bin; do
    	PATH="${PATH}:${P}"
	done
fi

# Who keeps creating these stupid empty directories? Nautilus, I think.
for d in $HOME/{Desktop,Documents,Music,Videos,Pictures,Public,Templates,Webcam}; do
	[ -d "$d" ] && rmdir --ignore-fail-on-non-empty "$d"
done

if [ -x "/usr/bin/vboxmanage" -a ! -d "$HOME/var/virtualboxes" ]; then
	if [ -d "$HOME/VirtualBox VMs" ]; then
		mv "$HOME/VirtualBox VMs" "$HOME/var/virtualboxes"
	else
		mkdir "$HOME/var/virtualboxes"
	fi
	vboxmanage setproperty machinefolder "$HOME/var/virtualboxes"
fi

if [ -d "$HOME/tmp" ]; then
	# TMPDIR is the canonical standard
	export TMPDIR=$HOME/tmp
	# ... but some programs are crap and use their own
	export TEMP=$HOME/tmp
fi

# I can't specify a nice switch in screen's configuration files, but it does
# interpret environment variables, so I can specify host-specific changes here.
# See etc/dotfiles/screenrc for details.
case "`hostname -s`" in
	io|kino|fiona|mio)
		SCREEN_CK='` '
		SCREEN_CKR='bt'
		;;
	*)
		# Default screen behavior
		SCREEN_CK=`/bin/echo -e '\01a'`
		SCREEN_CKR='^A'
		;;
esac
case "`hostname -s`" in
	io)		SCREEN_CL='kg'; PS1_HOSTCOLOR='2';;
	yuki)	SCREEN_CL='km'; PS1_HOSTCOLOR='5';;
	kino)	SCREEN_CL='km'; PS1_HOSTCOLOR='5';;
	seiko)	SCREEN_CL='kr'; PS1_HOSTCOLOR='1';;
	mio)	SCREEN_CL='kg'; PS1_HOSTCOLOR='2';;
	trio)	SCREEN_CL='ky'; PS1_HOSTCOLOR='4';;
	*)		SCREEN_CL='kw'; PS1_HOSTCOLOR='7';;
	# 0:black 1:red 2:green 3: blue 4:yellow 5:magenta 6:teal 7:white
esac

# By default mail spool on ubuntu is nonexistent, if so start mutt looking
# somewhere else.
if [ ! -d "$MAIL" ]; then
	# XXX don't really know the best thing to do here
	MAIL=~/var/mail/inbox/
fi

if [ "$MANPATH" ]; then
	export MANPATH
fi
if [ "$INFOPATH" ]; then
	export INFOPATH
fi
export SCREEN_CK
export SCREEN_CKR
export SCREEN_CL
export PS1_HOSTCOLOR
# Tell various languages where to find my handy libraries
export TEXINPUTS=./:$HOME/lib/latex2e/:
export PYTHONPATH=lib:$HOME/lib/python
export PYTHONSTARTUP=$HOME/.pythonrc.py
export PYTHONDOCS=/usr/share/doc/python-doc/html
export CLASSPATH=.:$HOME/lib/java

export EDITOR=vim
export PAGER=less
export LESS=-FRSXa

# Bash settings

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
#export HISTCONTROL=erasedups
export HISTCONTROL=ignoredups:ignorespace
# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
export HISTSIZE=1000
export HISTFILESIZE=2000

export TZ=America/Los_Angeles

# This is no good with new gnome's im-switch...
#export GTK_IM_MODULE="scim"
#export XMODIFIERS="@im=SCIM"

# Settings for virtualenvwrapper and pip
# Grr I shoulnd't even have to set this. Don't mess with my PS1.
export VIRTUAL_ENV_DISABLE_PROMPT=1
export WORKON_HOME="$HOME/var/virtualenvs"
export DEVELDIR="$WORKON_HOME"
# Not sure I need this but:
export PIP_VIRTUALENV_BASE="$WORKON_HOME"
# I only use pip within virtualenvs:
export PIP_REQUIRE_VIRTUALENV=true
# And I don't want to have to use -E every time:
export PIP_RESPECT_VIRTUALENV=true
# Save a little bit of bandwidth if reqs haven't changed
export PIP_DOWNLOAD_CACHE="$HOME/var/tmp/pip-cache"
export DJANGO_COLORS=light

# Take advantage of the fricken awesome tools from /etc/bash_completion.d/git
export GIT_PS1_SHOWSTASHSTATE=1
export GIT_PS1_SHOWUNTRACKEDFILES=1
export GIT_PS1_SHOWUPSTREAM=1

# Elm
export ELM_HOME=$HOME/usr/lib/node_modules/elm/share

# Guix
export GUIX_LOCPATH=$HOME/.guix-profile/lib/locale
export GUILE_LOAD_PATH="$HOME/.guix-profile/share/guile/site/2.0"
export GUILE_LOAD_COMPILED_PATH="$HOME/.guix-profile/share/guile/site/2.0"

# In zsh, report on all commands that take longer that 5 sec.
export REPORTTIME=5

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# Ensure virtualenvwrapper directory exists
if [ -x /usr/bin/virtualenv -a ! -d "$WORKON_HOME" ]; then
	mkdir "$WORKON_HOME"
fi

# Perl cpan
PATH="/home/mlamb/perl5/bin${PATH:+:${PATH}}"; export PATH;
PERL5LIB="/home/mlamb/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
PERL_LOCAL_LIB_ROOT="/home/mlamb/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
PERL_MB_OPT="--install_base \"/home/mlamb/perl5\""; export PERL_MB_OPT;
PERL_MM_OPT="INSTALL_BASE=/home/mlamb/perl5"; export PERL_MM_OPT;

# if this is bash, include .bashrc if it exists.
if [ "$BASH_VERSION" -a -f ~/.bashrc ]; then
	. ~/.bashrc
elif [ "$ZSH_VERSION" -a -f ~/.zshrc ]; then
	. ~/.zshrc
fi

# This is a zsh-specific PS1. It is necessary to do this because dash, not
# zsh, is the login shell when logging in graphically. /etc/gdm/Xsession is a
# 'sh' (dash) script which sources ~/.xprofile, which sources ~/.profile.
# 
# It is however safe to do this because bash is configured in a stupid way on
# Ubuntu; you're basically forced to set PS1 in .bashrc and thus it can't
# inherit the value from the environment. (This is one of the reasons I've
# switched to zsh.)
# 
# I have .zprofile set to source .profile so that in the event we log in on the
# console it does the right thing. Just have to ensure there's nothing
# zsh-incompatible in the commands above.
export PS1='%B%F{green}%n@%m%f:%F{blue}%~%f%b%# '

# By design, if the other connection is still active, the other socket will
# still exist, and this won't overwrite.
if [ "$SSH_AUTH_SOCK" ]; then
    if [ -S "/tmp/ssh-agent-$USER-screen" ]; then
        echo "The socket used for ssh-agent in GNU screen still exists; not overwriting."
    else
        # TODO: a mechanism to spawn a connection that exists only to provide an
        # agent pipe
        ln -sf "$SSH_AUTH_SOCK" "/tmp/ssh-agent-$USER-screen"
    fi
fi

# vim: set ft=sh :
